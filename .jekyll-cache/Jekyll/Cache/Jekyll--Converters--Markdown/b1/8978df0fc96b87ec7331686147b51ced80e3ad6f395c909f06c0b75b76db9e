I"^<p>Flask is a microframework in Python. It is used to create a webapp. It can start a python web server. It can handle HTTP requests. It can also be used to make a webapp API.</p>

<h1 id="flask-mega-tutorial-notes">Flask Mega Tutorial Notes</h1>

<p>In this tutorial by Miguel Grinberg, we are learning to crate a micro-blogging site using flask and other dependencies.</p>

<ul>
  <li><code class="highlighter-rouge">before_request</code> is a flask native function that gets executed before any request is made. It can be used to update last_seen timestamp.</li>
</ul>

<h2 id="create-and-run-virtual-environment">Create and Run Virtual Environment</h2>

<ul>
  <li><code class="highlighter-rouge">python venv venv</code> creates a virtual environment with a dir ‘venv’ in root folder that has all python packages.</li>
  <li>Use <code class="highlighter-rouge">source venv/bin/activate</code> to activate it.</li>
</ul>

<h2 id="flask-debugging">Flask Debugging</h2>

<ul>
  <li><code class="highlighter-rouge">export FLASK_DEBUG=0</code> makes the environment PROD else it is DEV or TEST.</li>
  <li><code class="highlighter-rouge">export FLASK_APP=microblog.py</code> will make an variable that tells python which app to run.</li>
  <li><code class="highlighter-rouge">flask run</code> executes the app or if flask is not in path then do <code class="highlighter-rouge">&gt; python -m flask run</code></li>
</ul>

<h2 id="flask-db-migrate-commands">Flask DB Migrate commands</h2>
<p>We can use to create table and manage changes</p>
<ul>
  <li><code class="highlighter-rouge">flask db init</code> creates migration folder</li>
  <li><code class="highlighter-rouge">flask db migrate</code> creates scripts for table creation</li>
  <li><code class="highlighter-rouge">flask db upgrade</code> executes scripts to make table changes</li>
</ul>

<h2 id="start-a-python-email-server">Start a python email server</h2>

<p><code class="highlighter-rouge">(venv) $ python -m smtpd -n -c DebuggingServer localhost:8025</code> this command starts emulated email server.</p>

<p>Some variables that we might need to export:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export MAIL_SERVER=smtp.googlemail.com
export MAIL_PORT=587
export MAIL_USE_TLS=1
export MAIL_USERNAME=email_id@domain.com
export MAIL_PASSWORD="password"
</code></pre></div></div>

<h2 id="making-new-forms-in-app">Making new forms in app</h2>
<p>We need to define following:</p>
<ul>
  <li><strong>(M)</strong> Form Class - in module <code class="highlighter-rouge">forms.py</code> make class with fields and validate functions.</li>
  <li><strong>(V)</strong> HTML template - in <code class="highlighter-rouge">templates</code> folder, rendered from route with form passed as data. Display form elements, errors and hidden_tag.</li>
  <li><strong>(C)</strong> Route - in module <code class="highlighter-rouge">routes.py</code>, define new route, import form class and use. On submit, create object of model class to save/query data.</li>
  <li>Create a link to access new route.</li>
</ul>

<h2 id="saving-form-data-and-tables">Saving form data and tables</h2>
<ul>
  <li><strong>ORM</strong> can be created in <code class="highlighter-rouge">modules.py</code>. We can define classes for our tables. Classes also define relationships. Have functions to query data.</li>
  <li>use them in routes to save and query data.</li>
  <li>uses db service to handle database operations.</li>
</ul>

<h2 id="routespy">Routes.py</h2>
<ul>
  <li>imports forms classes from <code class="highlighter-rouge">forms.py</code> for:
    <ol>
      <li>getting form data via POST</li>
      <li>passing form to html template for making form components and displaying errors</li>
    </ol>
  </li>
  <li>import orm model classes from <code class="highlighter-rouge">models.py</code> for:
    <ol>
      <li>making object of DB Table model</li>
      <li>submit and commit new data</li>
      <li>query model class to fetch data</li>
    </ol>
  </li>
</ul>

<h2 id="app-__init__py">app __init__.py</h2>
<p>This defines app folder as a python package.</p>
<ul>
  <li>It is where we link all modules (.py files in folder app) together as a Flask app.</li>
  <li>We import routes, models and error modules here.</li>
</ul>

<p><strong>Services:</strong> Here we have various services defined. We use them across app like db, login, mail.</p>

<h2 id="blueprints">Blueprints</h2>
<p>We can separate out application logical modules in application. Like we can create separate package for auth, error handling etc.</p>

<p><code class="highlighter-rouge">from flask import Blueprint</code> is what we need to use.</p>

<p>To register a blueprint, the <code class="highlighter-rouge">register_blueprint()</code> method of the Flask application instance is used. When a blueprint is registered, any view functions, templates, static files, error handlers, etc. are connected to the application.</p>

<p>In each Blueprint package we make __initII.py that has name information and imports routes. Routes further imports and links model and controller.</p>

<h2 id="open-doubts">Open doubts</h2>

<ul>
  <li>UserMixin?</li>
  <li>Why we pass Classes as param to Class?</li>
</ul>

<h2 id="making-modules">Making modules</h2>

<ul>
  <li>to get url_for use <code class="highlighter-rouge">module.route</code>. For eg: main.index.</li>
  <li>But to render template use only <code class="highlighter-rouge">index.html</code> without module name.</li>
</ul>

<h2 id="elastic-search">Elastic Search</h2>

<ul>
  <li>You can install elastic search by <code class="highlighter-rouge">brew install elasticsearch</code> on mac.</li>
  <li>Access <code class="highlighter-rouge">http://localhost:9200</code> to view service JSON output.</li>
  <li>Also, install in python <code class="highlighter-rouge">pip install elasticsearch</code></li>
  <li>To have launched start elasticsearch now and restart at login: <code class="highlighter-rouge">brew services start elasticsearch</code></li>
  <li>Or, if you don’t want/need a background service you can just run: <code class="highlighter-rouge">elasticsearch</code></li>
</ul>

<p>Todo: Search not working, fix it.</p>
:ET